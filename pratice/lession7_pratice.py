# 透視變換跟前面其他的轉換一樣會用到齊次座標的概念
# 二為座標 : (x,y)
# 二維齊次座標 : (x',y',w') --> 齊次座標多出來的一個維度可以解釋成「遠近」，也因此齊次座標可以表示無窮遠的點。
# ------------------------------------------------------------------------------------------------------------------- #
# 3*3 轉移矩陣(Transformation Matrix) :
# [a b c ; d e f ; g h i ]
# Matrix 中左上 2*2矩陣 :線性變換用的矩陣
# [a b ]
# [d e ]
# Matrix 中左上 2*1矩陣 :平移變換用的矩陣
# [c]
# [f]
# Matrix 中左上 1*2 矩陣 :透視變換用的矩陣
# [g h]
# ------------------------------------------------------------------------------------------------------------------- #
# 透視變換 Perspective Transformation :
# 本質是將圖像投影到一個新的視平面，其通用變換公式為 :

# 透視變換可以視為改變視角的轉換，因此不像仿射變換，已經不保證「共線不變性」與「比例不變性」
# 在 OpenCV 中的實作中也是要事先給予轉換前後的4個點座標(getPerspective) --> 旋轉:getRotationMatrix2D
# p.s 仿射变换（Affine Transformation）可以理解为透视变换的特殊形式。
# -------------------------------------------------------------------------------------------------------------------- #
# 轉換矩陣的設計概念 :
# 主要分為線性轉換 / 平移 / 透視的部份
# 雖然可以手動設計轉換矩陣，但是仿射跟透視的需求，還是個別以 3 個點跟 4 個點來建立矩陣比較方便
# 所以，给定透视变换对应的四对像素点坐标，即可求得透视变换矩阵；反之，给定透视变换矩阵，即可对图像或像素点坐标完成透视变换
# -------------------------------------------------------------------------------------------------------------------- #
import cv2
import numpy as np
picture = cv2.imread('lena.jpg',cv2.IMREAD_COLOR)
h, w = picture.shape[:2]
# 設定四對點，並取得 perspective 矩陣 (有對應關西的!)
point1 = np.float32([[60, 40], [420, 40], [420, 510], [60, 510]])
point2 = np.float32([[0, 80], [w, 120], [w, 430], [0, 470]])
point3 = np.float32([[90, 60], [512, 60], [512, 512], [90, 520]])
M = cv2.getPerspectiveTransform(point1, point2)
print(M)
# perspective 轉換
img_perspective = cv2.warpPerspective(picture, M, (w, h))
# perspective 轉換回來
M2 = cv2.getPerspectiveTransform(point2, point3)
img_perspective2 = cv2.warpPerspective(picture, M2, (w, h))
img_show = np.hstack((picture, img_perspective, img_perspective2))


cv2.imshow('perspective transform', img_show)
cv2.waitKey(0)
cv2.destroyAllWindows()
# -------------------------------------------------------------------------------------------------------------------- #
# 思考一下如果經過透視變換，是否會因為視角轉換的差異導致部份 pixel 遺失造成無法修復的問題？
# 看第三張圖可以發現像素會跑掉。
# 透視變換是否有甚麼實際上的應用？
#




























